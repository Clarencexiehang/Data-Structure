/*
实验六  AVL树

【开发语言及实现平台或实验环境】
Windows 操作系统， C开发环境。
【实验目的】
1、掌握二叉平衡树（AVL树）的插入操作。
【实验内容】
一、二叉树的链式声明
1、AVL树
struct AVLNode {
    int Data; 
    int Height;  // 以该结点为根的树的高度
    struct AVLNode * Left; 
    struct AVLNode * Right; 
};
二、实验内容
1、编写程序，从键盘输入6个整数，逐个插入到AVL树中，在每次插入时重新平衡。根据你输入的整数序列，在草稿纸上画出该AVL树，遍历输出该树并检查结果是否正确。
2、随机产生百万个整数，用该整数序列分别生成二叉排序树和AVL树。
（1）输出两棵树的结点总数；
（2）输出两棵树所有结点所在层次的总和；
（3）计算两棵树的平均查找长度ASL（查找成功时）。
注：rand()函数只能产生0~32767之间的整数，而二叉排序树中不允许有重复元素，因此实际上生成的树中结点不可能超过32768个。为能够生成百万个结点的树，生成的随机数必须超过0~32767的范围。
以十六进制来看，随机数范围在0000 ~ 7FFF之间，可以使用两个随机数的组合得到更大范围随机数：
n = (rand() << 15) | rand();
即第一个随机数左移15位 按位或 第二个随机数，从而范围可在0~231-1（1,073,741,823）之间。
*/


//实验一
#include<iostream>
#include<cstdlib>
using namespace std;

typedef struct AVLNode{
    int Data;
    int Height;
    struct AVLNode *Left;
    struct AVLNode *Right;
};

AVLNode* SingleLeftRotation(AVLNode *T);
AVLNode* DoubleLeftRotation(AVLNode *T);
AVLNode* SingleRightRotation(AVLNode *T);
AVLNode* DoubleRightRotation(AVLNode *T);
void PreOrderTraverse(AVLNode* T);
int Max(int a,int b);

int GetHeight(AVLNode *TreeNode){
    int m,n;
    if(TreeNode==NULL){return 0;}
    else{
        m=GetHeight(TreeNode->Left);
        n=GetHeight(TreeNode->Right);
        if(m>n) return m+1;
        else return n+1;
    }
}

struct AVLNode* InsertAVL(AVLNode *&TreeNode,int elem){
    if(TreeNode==NULL){
        TreeNode=new AVLNode;
        TreeNode->Data=elem;
        TreeNode->Left=TreeNode->Right=NULL;
        TreeNode->Height=1;
    }
    else if(elem<TreeNode->Data){
        InsertAVL(TreeNode->Left,elem);
        if(GetHeight(TreeNode->Left)-GetHeight(TreeNode->Right)==2){
            if(elem<TreeNode->Data)
                TreeNode=SingleLeftRotation(TreeNode);
            else
                TreeNode=DoubleLeftRotation(TreeNode);
        }

    }
    else if(elem>TreeNode->Data){
        InsertAVL(TreeNode->Right,elem);
        if(GetHeight(TreeNode->Right)-GetHeight(TreeNode->Left)==2){
            if(elem>TreeNode->Data)
                TreeNode=SingleRightRotation(TreeNode);
            else
                TreeNode=DoubleRightRotation(TreeNode);
        }
    }
    return TreeNode;
}

AVLNode* SingleLeftRotation(AVLNode *T){
    AVLNode *l=T->Left;
    T->Left=l->Right;
    l->Right=T;
    T->Height = Max(GetHeight(T->Left),GetHeight(T->Right))+1;
    l->Height = Max(GetHeight(l->Left),T->Height)+1;
    return l;
}

AVLNode* DoubleLeftRotation(AVLNode *T){
    T->Left= SingleRightRotation(T->Left);
    return SingleLeftRotation(T);
}

AVLNode* SingleRightRotation(AVLNode *T){
    AVLNode *l=T->Right;
    T->Right=l->Left;
    l->Left=T;
    T->Height = Max(GetHeight(T->Left),GetHeight(T->Right))+1;
    l->Height = Max(GetHeight(l->Left),T->Height)+1;
    return l;
}

AVLNode* DoubleRightRotation(AVLNode *T){
    T->Right= SingleLeftRotation(T->Right);
    return SingleRightRotation(T);
}

void PreOrderTraverse(AVLNode *T) {
    if (T) {
        cout << T->Data << " ";
        PreOrderTraverse(T->Left);
        PreOrderTraverse(T->Right);
    }
}

int Max(int a,int b){
    return a>b?a:b;
}

int main(){
    struct AVLNode *T=NULL;

    int elem;
    cout<<"输入数据： ";
    for(int i=0;i<6;i++){
        cin>>elem;
        T=InsertAVL(T,elem);
    }
    cout<<"先序遍历结果为：";   PreOrderTraverse(T); cout<<endl;
    return 0;
}

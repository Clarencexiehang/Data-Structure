#include <iostream>
#include<cstdlib>
using namespace std;
const int Gigantic=10000;	//无穷大 

typedef struct Edge{
    int weight;
    int HeadPos,TailPos;
    struct Edge *next;
}Edge;

typedef struct Vertex{
    Edge *nextEdge;
}Vertex;

typedef struct UnDirectedGraph{
    Vertex *Vex;
    int VexNum;     //顶点个数
    int EdgeNum;    //边个数
}UnDirectedGraph;

UnDirectedGraph *CreateDirectedGraph(UnDirectedGraph *g){
    int vexnum,edgenum;
    //cout<<"输入顶点个数与边的个数： ";
    cin>>vexnum;cin>>edgenum;
    g->VexNum=vexnum;   g->EdgeNum=edgenum;
    g->Vex=new Vertex [g->VexNum];
    for(int i=0;i<g->VexNum;i++){
        g->Vex[i].nextEdge=NULL;
    }
    for(int k=0;k<g->EdgeNum;k++){
        int i,j,w;
        cin>>i; cin>>j; cin>>w;

        Edge *em=new Edge;   //分配一个结点存储数据
        em->weight=w;
        em->HeadPos=i;  em->TailPos=j;
        if(g->Vex[i].nextEdge==NULL){
            g->Vex[i].nextEdge=em;
            em->next=NULL;
        }
        else{
            em->next=g->Vex[i].nextEdge;
            g->Vex[i].nextEdge=em;
        }
        
        
        Edge *em2=new Edge;   //分配一个结点存储数据，用双向表示无向图 
        em2->weight=w;
        em2->HeadPos=j;  em2->TailPos=i;
        if(g->Vex[j].nextEdge==NULL){
            g->Vex[j].nextEdge=em;
            em2->next=NULL;
        }
        else{
            em2->next=g->Vex[j].nextEdge;
            g->Vex[j].nextEdge=em2;
        }
    }
    return g;
}

int Prim(UnDirectedGraph *g){
    bool Selected[g->VexNum];
    int MinDist[g->VexNum];
    int Parent[g->VexNum];
    int i,j;  int HaveVisitedNUM=1;
    for(i=0;i<g->VexNum;i++){   //初始各数组
        Selected[i]=false;
        MinDist[i]=Gigantic;
        Parent[i]=-1;
    }
    Selected[0]= true;  			//选择第一个结点为开始结点
    Edge *p=g->Vex[0].nextEdge;
    MinDist[0]=0;

    for(i=0;i<g->VexNum-1;i++){
        //Step1: 更新每一个邻接点的信息 
        while(p!=NULL){
        	if(Selected[p->TailPos]==true){		//如果该邻结点已被访问，则p下移，跳过本次循环 
        		p=p->next;
        		continue;
			}
            if(MinDist[p->TailPos]>p->weight){
                MinDist[p->TailPos]=p->weight;
                Parent[p->TailPos]=p->HeadPos;
                //cout<<"HeadPos= "<<p->HeadPos<<endl;cout<<p->TailPos<<"的MinDis修改为："<<p->weight<<endl; 
            }
            p=p->next;
        }
        //Step2:找到更新后未被访问结点MinDist的最小值 ，然后访问其对应的结点 
        int min=Gigantic+100;   
        int minPos;         //记录最小值的下标
        for(j=1;j<g->VexNum;j++) {
            if(Selected[j]==true){continue;}
            else{
                if(MinDist[j]<min) {min=MinDist[j]; minPos=j;/*cout<<"MinPos= "<<minPos<<endl;*/} 
            }
        }
        p=g->Vex[minPos].nextEdge;			//指针下移 
        Selected[minPos]=true;   HaveVisitedNUM++;
      
    }
    
    //遍历完所有结点后，计算代价 
    int cost=0;
    for(j=0;j<g->VexNum;j++){
    	\
        cost+=MinDist[j];
    }
    return cost;
}



int main(){
    UnDirectedGraph *g=new UnDirectedGraph;
    g=CreateDirectedGraph(g);
    int cost=Prim(g);
    if(cost>=Gigantic)	cout<<"false"<<endl;	
    else	cout<<cost<<endl;

    return 0;
}
